{"version":3,"sources":["redux/database/database.types.ts","redux/database/database.actions.ts","types/types.ts","redux/database/database.reducer.ts","redux/store.ts","helpers/api/api-helper.ts","helpers/database/database-helper.ts","components/menu/Menu.tsx","components/database/AskDatabaseUrl.tsx","components/view-list/CollectionList.tsx","components/view-list/Collection.tsx","components/view-list/Document.tsx","components/view/View.tsx","App.tsx","serviceWorker.ts","index.tsx","components/view/View.module.scss"],"names":["ACTIONS","ENTITY_TYPE","setDatabaseUrl","url","projectId","type","SET_DATABASE_URL","payload","setLoaded","SET_LOADED","defaultState","loaded","connected","reducers","combineReducers","database","state","action","databaseUrl","RESET","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","serverUrl","ApiHelper","hostname","axios","post","path","body","map","elm","name","res","data","DatabaseHelper","localStorage","getItem","JSON","parse","toSave","setItem","stringify","removeItem","this","clearUrl","dispatch","savedUrl","getSavedUrl","setSettings","setSavedUrl","Menu","AppBar","Toolbar","IconButton","edge","color","aria-label","Typography","variant","AskDatabaseUrl","open","useState","loading","setLoading","setProjectId","newUrl","setNewUrl","valid","setValid","handleSubmit","a","setUrl","isValid","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","value","onChange","e","target","DialogActions","CircularProgress","size","Button","onClick","CollectionList","setPath","list","setList","useEffect","getListCollection","then","List","ListItem","key","button","ListItemText","Collection","loadData","useCallback","getCollection","documents","Document","subCollections","setSubCollection","datas","setDatas","getDocument","collections","Object","keys","toString","subheader","ListSubheader","component","sub","generateIndex","pos","reduce","prev","curr","i","View","viewType","useMemo","length","DOCUMENT","COLLECTION","Paper","elevation","className","styles","pathElm","filter","_elm","App","openMenu","setOpenMenu","React","anchorEl","setAnchorEl","databaseState","useSelector","showPromtUrl","init","resetConf","clear","style","height","event","currentTarget","keepMounted","onClose","MenuItem","Container","Boolean","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.9ab0a910.chunk.js","sourcesContent":["export interface State {\n    databaseUrl?: string\n    projectId?: string\n    loaded: boolean\n    connected: boolean\n}\n\nexport enum ACTIONS {\n    SET_DATABASE_URL = \"database/SET_DATABASE_URL\",\n    SET_LOADED = \"database/SET_LOADED\",\n    RESET = \"database/RESET\",\n}\n\ninterface SetDatabaseUrl {\n    type: ACTIONS.SET_DATABASE_URL\n    payload: {\n        url: string\n        projectId: string\n    }\n}\n\ninterface SetLoaded {\n    type: ACTIONS.SET_LOADED\n}\n\ninterface Reset {\n    type: ACTIONS.RESET\n}\n\nexport type Actions = SetDatabaseUrl | SetLoaded | Reset\n","import { ACTIONS, Actions } from \"./database.types\"\n\nexport const setDatabaseUrl = (url: string, projectId: string): Actions => ({\n    type: ACTIONS.SET_DATABASE_URL,\n    payload: {\n        url,\n        projectId,\n    },\n})\n\nexport const setLoaded = (): Actions => ({\n    type: ACTIONS.SET_LOADED,\n})\n\nexport const reset = (): Actions => ({\n    type: ACTIONS.RESET,\n})\n","export enum ENTITY_TYPE {\n    COLLECTION = \"COLLECTION\",\n    DOCUMENT = \"DOCUMENT\",\n}\n","import { State, Actions, ACTIONS } from \"./database.types\"\nimport { Reducer } from \"redux\"\n\nconst defaultState: State = {\n    loaded: false,\n    connected: false,\n}\n\nexport const databaseReducer: Reducer<State, Actions> = (\n    state = defaultState,\n    action,\n) => {\n    switch (action.type) {\n        case ACTIONS.SET_DATABASE_URL: {\n            return {\n                ...state,\n                loaded: true,\n                databaseUrl: action.payload.url,\n                projectId: action.payload.projectId,\n                connected: true,\n            }\n        }\n        case ACTIONS.SET_LOADED: {\n            return {\n                ...state,\n                loaded: true,\n            }\n        }\n\n        case ACTIONS.RESET: {\n            return {\n                ...defaultState,\n                loaded: true,\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n","import { databaseReducer } from \"./database/database.reducer\"\nimport { createStore, combineReducers } from \"redux\"\n\nconst reducers = combineReducers({\n    database: databaseReducer,\n})\n\nexport type StoreType = ReturnType<typeof reducers>\n\nexport const store = createStore(\n    reducers,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n        (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n)\n","import axios from \"axios\"\n\nconst serverUrl = \"http://localhost:8938\"\n\ninterface DocumentEntity {\n    id: string\n    collections: Array<{\n        name: string\n    }>\n    data: any\n}\n\ninterface CollectionEntity {\n    documents: Array<{\n        name: string\n    }>\n}\n\nexport class ApiHelper {\n    public async setSettings(hostname: string, projectId: string): Promise<boolean> {\n        try {\n            await axios.post(`${serverUrl}/firebase`, {\n                url: hostname,\n                projectId: projectId,\n            })\n            return true\n        } catch {\n            return false\n        }\n    }\n\n    public async getCollection(path: string[]): Promise<CollectionEntity> {\n        const body = path.map(elm => ({\n            name: elm,\n        }))\n\n        const res = await axios.post(`${serverUrl}/collection`, {\n            path: body,\n        })\n\n        return res.data\n    }\n\n    public async getDocument(path: string[]): Promise<DocumentEntity> {\n        const body = {\n            path: path.map(elm => ({\n                name: elm,\n            })),\n        }\n\n        const res = await axios.post(`${serverUrl}/document`, body)\n        return res.data\n    }\n\n    public async getListCollection(): Promise<string[]> {\n        const data = await axios.post(`${serverUrl}/list`)\n        return data.data\n    }\n}\n","import { setDatabaseUrl, setLoaded, reset } from \"redux/database/database.actions\"\nimport { store } from \"redux/store\"\nimport { ApiHelper } from \"helpers/api/api-helper\"\n\nconst localStorageKey = \"__database_url__\"\n\ninterface DatabaseConfig {\n    hostname: string\n    projectId: string\n}\n\nexport class DatabaseHelper {\n    private getSavedUrl(): DatabaseConfig | undefined {\n        const hostname = localStorage.getItem(localStorageKey)\n\n        if (!hostname) {\n            return undefined\n        }\n\n        return JSON.parse(hostname)\n    }\n\n    private setSavedUrl(url: string, projectId: string) {\n        const toSave: DatabaseConfig = {\n            hostname: url,\n            projectId,\n        }\n        localStorage.setItem(localStorageKey, JSON.stringify(toSave))\n    }\n\n    private clearUrl() {\n        localStorage.removeItem(localStorageKey)\n    }\n\n    public async clear() {\n        this.clearUrl()\n        store.dispatch(reset())\n    }\n\n    public async init() {\n        const savedUrl = this.getSavedUrl()\n        if (!savedUrl) {\n            store.dispatch(setLoaded())\n            return\n        }\n\n        if (!(await new ApiHelper().setSettings(savedUrl.hostname, savedUrl.projectId))) {\n            store.dispatch(setLoaded())\n            return\n        }\n\n        store.dispatch(setDatabaseUrl(savedUrl.hostname, savedUrl.projectId))\n    }\n\n    public async setUrl(url: string, projectId: string): Promise<boolean> {\n        const valid = await new ApiHelper().setSettings(url, projectId)\n        if (!valid) {\n            return false\n        }\n        this.setSavedUrl(url, projectId)\n\n        store.dispatch(setDatabaseUrl(url, projectId))\n        return true\n    }\n}\n","import React from \"react\"\nimport { AppBar, Toolbar, IconButton, Typography } from \"@material-ui/core\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\n\nexport const Menu = () => {\n    return (\n        <AppBar>\n            <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\">Fizualizer</Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import React, { useState } from \"react\"\nimport { DatabaseHelper } from \"helpers/database/database-helper\"\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    TextField,\n    DialogActions,\n    Button,\n    DialogContentText,\n    CircularProgress,\n} from \"@material-ui/core\"\n\ninterface props {\n    open: boolean\n}\n\nexport const AskDatabaseUrl: React.FC<props> = ({ open }) => {\n    const [loading, setLoading] = useState(false)\n    const [projectId, setProjectId] = useState(\"\")\n    const [newUrl, setNewUrl] = useState(\"\")\n    const [valid, setValid] = useState(true)\n\n    const handleSubmit = async () => {\n        setLoading(true)\n        const isValid = await new DatabaseHelper().setUrl(newUrl, projectId)\n        setValid(isValid)\n        setLoading(false)\n    }\n\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Database URL</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Please provider the database URL to use this tool\n                </DialogContentText>\n                {valid && <DialogContentText>Invalid URL</DialogContentText>}\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    label=\"URL\"\n                    type=\"text\"\n                    fullWidth\n                    value={newUrl}\n                    onChange={e => setNewUrl(e.target.value)}\n                />\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    label=\"ProjectId\"\n                    type=\"text\"\n                    fullWidth\n                    value={projectId}\n                    onChange={e => setProjectId(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                {loading ? (\n                    <CircularProgress size=\"1rem\" />\n                ) : (\n                    <Button color=\"primary\" onClick={handleSubmit}>\n                        Save\n                    </Button>\n                )}\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React, { useState, useEffect } from \"react\"\nimport { ApiHelper } from \"helpers/api/api-helper\"\nimport { List, ListItem, ListItemText } from \"@material-ui/core\"\n\ninterface props {\n    setPath: (newPath: string[]) => void\n    path: string[]\n}\n\nexport const CollectionList: React.FC<props> = ({ path, setPath }) => {\n    const [list, setList] = useState<string[]>([])\n\n    useEffect(() => {\n        new ApiHelper().getListCollection().then(data => setList(data))\n    }, [])\n\n    return (\n        <List>\n            {list.map(elm => (\n                <ListItem key={elm} button>\n                    <ListItemText onClick={() => setPath([elm])}>{elm}</ListItemText>\n                </ListItem>\n            ))}\n        </List>\n    )\n}\n","import React, { useState, useEffect, useCallback } from \"react\"\nimport { ApiHelper } from \"helpers/api/api-helper\"\nimport { List, ListItem, ListItemText, Button } from \"@material-ui/core\"\n\ninterface props {\n    setPath: (newPath: string[]) => void\n    path: string[]\n}\n\nexport const Collection: React.FC<props> = ({ path, setPath }) => {\n    const [list, setList] = useState<string[]>([])\n\n    const loadData = useCallback(async () => {\n        const data = await new ApiHelper().getCollection(path)\n        setList(data.documents.map(elm => elm.name))\n    }, [path])\n\n    useEffect(() => {\n        loadData()\n    }, [loadData])\n\n    return (\n        <div>\n            <Button onClick={loadData}>Refresh</Button>\n            <List>\n                {list.map(elm => (\n                    <ListItem key={elm} button onClick={() => setPath([...path, elm])}>\n                        <ListItemText>{elm}</ListItemText>\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    )\n}\n","import React, { useState, useEffect, useCallback } from \"react\"\nimport { ApiHelper } from \"helpers/api/api-helper\"\nimport { ListItem, ListItemText, List, ListSubheader, Button } from \"@material-ui/core\"\n\ninterface props {\n    setPath: (newPath: string[]) => void\n    path: string[]\n}\n\nexport const Document: React.FC<props> = ({ path, setPath }) => {\n    const [subCollections, setSubCollection] = useState<string[]>([])\n    const [datas, setDatas] = useState<{ key: string; value: any }[]>([])\n\n    const loadData = useCallback(async () => {\n        const data = await new ApiHelper().getDocument(path)\n        setSubCollection(data.collections.map(elm => elm.name))\n        setDatas(\n            Object.keys(data.data).map(elm => {\n                return {\n                    key: elm,\n                    value: data.data[elm].toString(),\n                }\n            }),\n        )\n    }, [path])\n\n    useEffect(() => {\n        loadData()\n    }, [loadData])\n\n    return (\n        <div>\n            <Button onClick={loadData}>Refresh</Button>\n            <List\n                subheader={<ListSubheader component=\"div\">Subcollections</ListSubheader>}\n            >\n                {subCollections.map(sub => (\n                    <ListItem key={sub} button onClick={() => setPath([...path, sub])}>\n                        <ListItemText>{sub}</ListItemText>\n                    </ListItem>\n                ))}\n            </List>\n\n            <List subheader={<ListSubheader component=\"div\">Data</ListSubheader>}>\n                {datas.map(data => (\n                    <ListItem key={data.key}>\n                        <ListItemText>\n                            {data.key}: {data.value}\n                        </ListItemText>\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    )\n}\n","import React, { useState, useMemo } from \"react\"\nimport { Paper } from \"@material-ui/core\"\nimport { ENTITY_TYPE } from \"types/types\"\nimport styles from \"./View.module.scss\"\nimport { CollectionList } from \"components/view-list/CollectionList\"\nimport { Collection } from \"components/view-list/Collection\"\nimport { Document } from \"components/view-list/Document\"\n\nconst generateIndex = (path: string[], pos: number) => {\n    return path.reduce((prev, curr, i) => {\n        if (i > pos) {\n            return prev\n        }\n        return `${prev}/${curr}`\n    }, \"\")\n}\n\nexport const View: React.FC = () => {\n    const [path, setPath] = useState<string[]>([])\n\n    const viewType = useMemo(() => {\n        return path.length % 2 === 0 ? ENTITY_TYPE.DOCUMENT : ENTITY_TYPE.COLLECTION\n    }, [path])\n\n    return (\n        <Paper elevation={1}>\n            <div className={styles.path}>\n                <div onClick={() => setPath([])} className={styles.pathElm}>\n                    / Home\n                </div>\n                {path.map((elm, i) => (\n                    <div\n                        key={generateIndex(path, i)}\n                        className={styles.pathElm}\n                        onClick={() => setPath(path.filter((_elm, pos) => pos <= i))}\n                    >\n                        / {elm}\n                    </div>\n                ))}\n            </div>\n            {path.length === 0 && <CollectionList path={path} setPath={setPath} />}\n            {viewType === ENTITY_TYPE.COLLECTION && (\n                <Collection path={path} setPath={setPath} />\n            )}\n            {viewType === ENTITY_TYPE.DOCUMENT && path.length !== 0 && (\n                <Document path={path} setPath={setPath} />\n            )}\n        </Paper>\n    )\n}\n","import React, { useEffect, useMemo, useState } from \"react\"\nimport { DatabaseHelper } from \"helpers/database/database-helper\"\nimport { Menu } from \"components/menu/Menu\"\nimport { StoreType } from \"redux/store\"\nimport { useSelector } from \"react-redux\"\nimport { AskDatabaseUrl } from \"components/database/AskDatabaseUrl\"\nimport { View } from \"./components/view/View\"\nimport { Container, Menu as UIMenu, Button, MenuItem } from \"@material-ui/core\"\n// import styles from \"./App.module.scss\"\n\nfunction App() {\n    const [openMenu, setOpenMenu] = useState(false)\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n\n    const databaseState = useSelector<StoreType, StoreType[\"database\"]>(\n        state => state.database,\n    )\n\n    const handleClickMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget)\n        setOpenMenu(true)\n    }\n\n    const showPromtUrl = useMemo(() => {\n        return !databaseState.connected && databaseState.loaded\n    }, [databaseState.connected, databaseState.loaded])\n\n    useEffect(() => {\n        new DatabaseHelper().init()\n    }, [])\n\n    const resetConf = async () => {\n        await new DatabaseHelper().clear()\n    }\n\n    return (\n        <div className=\"App\">\n            <Menu />\n            <div style={{ height: 80 }} />\n            <div>\n                <Button onClick={handleClickMenu}>Menu</Button>\n                <UIMenu\n                    keepMounted\n                    open={openMenu}\n                    onClose={() => setOpenMenu(false)}\n                    anchorEl={anchorEl}\n                >\n                    <MenuItem onClick={resetConf}>Reset configuration</MenuItem>\n                </UIMenu>\n            </div>\n            <Container>\n                <AskDatabaseUrl open={showPromtUrl} />\n                {databaseState.connected && <View />}\n            </Container>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.scss\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { store } from \"./redux/store\"\nimport { Provider } from \"react-redux\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"path\":\"View_path__-axx5\",\"pathElm\":\"View_pathElm__dMa74\"};"],"sourceRoot":""}